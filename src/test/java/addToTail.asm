; add to tail.asm
data: equ #0				; this is a comment
next: equ #1
head: equ #-1
lp: equ #2 				; NOTE: memory addresses of extension words increase left to right
v: equ #3 				; addr: opcode (X=usually 0) extension word 1 extension word 2 comments
addToTail: 				; ----- -------------------- ---------------- ---------------- --------
	link a6,#-1 		; $02: 0001000 110 111 100 1111111111111111 ( -1)
	pshreg #64 			; bit 6=a0 ; $04: 00110011 XX 111 100 0000000001000000 (a7=1,a6=2,a5=4,...)
	move lp(a6),a0 		; $06: 0100 001 000 101 110 0000000000000010 (+2)
	move (a0),head(a6) 	; $08: 0100 101 110 010 000 1111111111111111 (-1)
	cmp #0,head(a6) 	; $0A: 0111 101 110 111 100 0000000000000000 1111111111111111 (0,-1)
	bne elsepart 		; $0D: 00101110 XX 111 010 0000000000010001 ($0e+$11=$1f)
	move #2,-(sp) 		; $0F: 0100 100 111 111 100 0000000000000010 (+2)
	jsr alloc 			; $11: 00101100 XX 111 010 0000000000011010 ($12+$1a=$2c)
	move lp(a6),a1 		; $13: 0100 001 001 101 110 0000000000000010 (+2)
	move a0,(a1) 		; $15: 0100 010 001 001 000
	move a0,head(a6) 	; $16: 0100 101 110 001 000 1111111111111111 (-1)
	move v(a6),data(a0) ; $18: 0100 101 000 101 110 0000000000000011 0000000000000000 (+3,0)
	clr next(a0) 		; $1b: 00100001 XX 101 000 0000000000000001 (+1)
	jmp commonexit 		; $1d: 00101011 XX 111 010 0000000000001001 ($1d+$09=$27)
elsepart:
	move v(a6),-(sp) 	; $1f: 0100 100 111 101 110 0000000000000011 (+3)
	move head(a6),a0 	; $21: 0100 001 000 101 110 1111111111111111 (-1)
	pea next(a0) 		; $23: 00101010 XX 101 000 0000000000000001 (+1)
	jsr addToTail 		; $25: 00101100 XX 111 010 1111111111011100 ($26-$24=$02)
commonexit:
	popreg #64 ;bit 6=a1 ; $27: 00110100 XX 111 100 0000000001000000 (see pshreg, above)
	unlk a6 			; $29: 00101001 XX 001 110 (not like link)
	rtd 2 				; $2a: 00101000 XX 111 000 0000000000000010 (+2)
alloc:
	move d0,d1